{"mappings":"AAAA,wBAAwB;AACxB,IAAI,kBAAkB;AACtB,MAAM,SAAS;IACX,UAAU;IACV,OAAO;IACP,SAAS;IACT,WAAW;IACX,gBAAgB;QAAc,kBAAkB;IAAM;IACtD,eAAe;QAAc,kBAAkB;QAAO;IAAmB;AAC7E;AAEA,eAAe;AACf,MAAM,MAAM,IAAI,IAAI,GAAG;AACvB,IAAI,GAAG,CAAC,QAAQ,YAAY,GAAG,KAAK,IAAI,CAAC,YAAY,QAAQ,CAAC;AAC9D,IAAI,GAAG,CAAC,QAAQ,SAAS,GAAG,IAAI,IAAI,CAAC,gBAAgB,QAAQ,CAAC;AAC9D,IAAI,GAAG,CAAC,QAAQ,WAAW,KAAK,GAAG,IAAI,CAAC,WAAW,QAAQ,CAAC;AAC5D,IAAI,GAAG,CAAC,QAAQ,aAAa,KAAK,GAAG,IAAI,CAAC;AAC1C,IAAI,GAAG,CAAC,QAAQ,kBAAkB,IAAI,CAAC;AACvC,IAAI,GAAG,CAAC,QAAQ,iBAAiB,IAAI,CAAC;AAEtC,mCAAmC;AACnC,SAAS;IACL,OAAO;IACP,OAAO,QAAQ,CAAC,GAAG,CAAC,GAAG,GAAG;AAC9B;AAEA,yBAAyB;AACzB,SAAS;IACL,sBAAsB;IACtB,SAAS,MAAM,IAAI,yBAAyB;IAC5C,SAAS,MAAM,CAAC,OAAO;AAC3B;AAEA,kBAAkB;AAClB,IAAI,OAAO;AACX,IAAI,WAAW;AAEf,iBAAiB;AACjB,SAAS,QAAQ,WAAW;IACxB,IAAI,iBAAiB;QACjB,MAAM,YAAY,AAAC,CAAA,cAAc,QAAO,IAAK,QAAQ,OAAO,SAAS;QACrE,WAAW;QAEX,mCAAmC;QACnC,QAAQ;QAER,0BAA0B;QAC1B,MAAM,WAAW,OAAO,KAAK,GAAI,CAAA,KAAK,EAAE,GAAG,GAAE;QAC7C,IAAI,OAAO,OAAO,QAAQ,GAAG,KAAK,GAAG,CAAC,YAAY;QAClD,IAAI,OAAO,AAAC,OAAO,QAAQ,GAAG,KAAK,GAAG,CAAC,YAAY,OAAS,MAAM,OAAO,OAAO,GAAG,KAAK,GAAG,CAAC,MAAM;QAElG,OAAO,QAAQ,CAAC,CAAC,GAAG;QACpB,OAAO,QAAQ,CAAC,CAAC,GAAG;QAEpB,sCAAsC;QACtC,IAAI,OAAO,QAAQ,CAAC,CAAC,GAAG,GACpB,OAAO,aAAa,IAAI,qDAAqD;IAErF,OACI,WAAW,aAAa,wBAAwB;IAGpD,sBAAsB;AAC1B;AAEA,UAAU,sCAAsC;AAChD,QAAQ,IAAI,2BAA2B","sources":["src/js/main.js"],"sourcesContent":["// Simulation parameters\nlet animationActive = false;\nconst params = {\n    velocity: 20,\n    angle: 45,\n    gravity: -9.81,\n    timeScale: 1, // Control the simulation speed\n    startAnimation: function () { animationActive = true; },\n    stopAnimation: function () { animationActive = false; resetSimulation(); }\n};\n\n// GUI controls\nconst gui = new dat.GUI();\ngui.add(params, 'velocity', 1, 100).name('Velocity').onChange(resetSimulation);\ngui.add(params, 'angle', 0, 90).name('Launch Angle').onChange(resetSimulation);\ngui.add(params, 'gravity', -20, 0).name('Gravity').onChange(resetSimulation);\ngui.add(params, 'timeScale', 0.1, 2).name('Time Scale');\ngui.add(params, 'startAnimation').name('Start Animation');\ngui.add(params, 'stopAnimation').name('Stop Animation');\n\n// Function to reset the simulation\nfunction resetSimulation() {\n    time = 0;\n    sphere.position.set(0, 0, 0);\n}\n\n// Continuous render loop\nfunction render() {\n    requestAnimationFrame(render);\n    controls.update(); // Update camera controls\n    renderer.render(scene, camera);\n}\n\n// Time management\nlet time = 0;\nlet lastTime = 0;\n\n// Animation loop\nfunction animate(currentTime) {\n    if (animationActive) {\n        const deltaTime = (currentTime - lastTime) * 0.001 * params.timeScale;\n        lastTime = currentTime;\n\n        // Use deltaTime for time increment\n        time += deltaTime;\n\n        // Calculate new positions\n        const angleRad = params.angle * (Math.PI / 180);\n        let posX = params.velocity * Math.cos(angleRad) * time;\n        let posY = (params.velocity * Math.sin(angleRad) * time) + (0.5 * params.gravity * Math.pow(time, 2));\n\n        sphere.position.x = posX;\n        sphere.position.y = posY;\n\n        // Reset if the sphere hits the ground\n        if (sphere.position.y < 0) {\n            params.stopAnimation(); // Stop the animation when the sphere hits the ground\n        }\n    } else {\n        lastTime = currentTime; // Ensure smooth restart\n    }\n\n    requestAnimationFrame(animate);\n}\n\nrender(); // Start the continuous rendering loop\nanimate(0); // Start the animation loop"],"names":[],"version":3,"file":"index.013b6ffd.js.map"}